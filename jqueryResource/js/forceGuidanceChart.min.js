(function(window) {
    if (typeof d3 === "undefined") {
        throw new Error("Please include D3.js Library first.")
    }
    function forceGuidanceChart(el, w, h) {
        var me = this;
        me.domElement = el;
        me.width = w;
        me.height = h;
        me._force = d3.layout.force().gravity(0).charge(0).on("tick", function(d) {
            me._force_tickHandler.bind(me)(d);
            if (me.animation) {
                me._bubbles.attr("transform", function(d) {
                    return "translate(" + d.x + "," + d.y + ")"
                })
            }
        }).on("end", function(d) {
            me._tickEnd = true;
            me._bubbles.attr("transform", function(d) {
                return "translate(" + d.x + "," + d.y + ")"
            })
        })
    }
    forceGuidanceChart.prototype = {
        constructor: forceGuidanceChart,
        padding: {
            left: 20,
            right: 20,
            top: 20,
            bottom: 20
        },
        domElement: null,
        width: 100,
        height: 100,
        minRadius: 5,
        maxRadius: 25,
        minFontSize: 12,
        maxFontSize: 25,
        categories: null,
        labelFunction: function(d) {
            return d.name
        },
        weightFunction: function(d) {
            return Number(d.contribution)
        },
        categoryFunction: function(d) {
            return d.type
        },
        gradeFunction: function(d) {
            return d.grade
        },
        clickHandler: null,
        showTooltip: null,
        hideTooltip: null,
        customDrawFunction: function(g, d, radius, color) {
            g.append("circle").attr("r", radius).style("fill", color).style("opacity", "1");
        },
        collisionPadding: 5,
        minCollisionRadius: 25,
        iconPadding: 150,
        _jitter: 0.618,
        _force: null,
        _categoryMap: null,
        _svg: null,
        _svgCenger: null,
        _ballGroup: null,
        _bubbles: null,
        _coreDistanceScale: null,
        _radiusScale: null,
        _fontSizeScale: null,
        _width: 0,
        _height: 0,
        _tickEnd: false,
        animation: true,
        init: function() {
            var me = this;
            me._width = me.width - me.padding.right - me.padding.left;
            me._height = me.height - me.padding.top - me.padding.bottom;
            me._radiusScale = d3.scale.linear().range([me.minRadius, me.maxRadius]);
            me._fontSizeScale = d3.scale.linear().range([me.minFontSize, me.maxFontSize]);
            me._coreDistanceScale = d3.scale.linear().range([100, me._width / 2 - 100]);
            me._force.size([me._width, me._height]);
            d3.select(me.domElement).selectAll().remove();
            me._svg = d3.select(me.domElement).append("svg").attr("width", me.width).attr("height", me.height);
            me._svgCenger = me._svg.append("g").attr("width", me._width).attr("height", me._height).attr("transform", "translate(" + me.padding.left + ", " + me.padding.top + ")");
            me._svgCenger.append("image").attr("width", function(d) {
                return me._width
            }).attr("height", function(d) {
                return me._height
            }).attr("preserveAspectRatio", "none").attr("xlink:href", function(d) {
                return me.backgroundImage
            });
            me._svgCenger.append("image").attr("width", function(d) {
                return me._width / 2
            }).attr("height", function(d) {
                return me._height / 2
            }).attr("width", function(d) {
                return 279
            }).attr("height", function(d) {
                return 279
            }).attr("preserveAspectRatio", "none").attr("xlink:href", function(d) {
                return me.switchMachineImage
            }).attr("transform", "translate(" + (me._width / 2 - 279 / 2) + ", " + (me._height / 2 - 279 / 2) + ")");
            me._categoryMap = {};
            if (me.categories) {
                me.categories.forEach(function(c) {
                    me._categoryMap[c.type] = c
                })
            }
        },
        _data: null,
        data: function(value) {
            var me = this;
            if (arguments.length < 1) {
                return me._data
            }
            me._data = value;
            var labelFunction = me.labelFunction || function(d) {
                        return d.label || ""
                    }
                ;
            var weightFunction = me.weightFunction || function(d) {
                        return d._weight || 1
                    }
                ;
            var categoryFunction = me.categoryFunction || function(d) {
                        return d.category || ""
                    }
                ;
            me.gradeFunction = me.gradeFunction || function(d) {
                    return d.grade || ""
                }
            ;
            me._radiusScale.domain([d3.min(me._data, weightFunction), d3.max(me._data, weightFunction)]);
            me._fontSizeScale.domain([d3.min(me._data, weightFunction), d3.max(me._data, weightFunction)]);
            me._coreDistanceScale.domain([d3.min(me._data, me.gradeFunction), d3.max(me._data, me.gradeFunction)]);
            me._svgCenger.selectAll(".node").remove();
            me._ballGroup = me._svgCenger.append("g").attr("class", "node");
            me._bubbles = me._ballGroup.selectAll("g").data(me._data).enter().append("g").style("cursor", "pointer").on("click", function(d) {
                if (me.clickHandler instanceof Function) {
                    me.clickHandler.call(null, d)
                }
            }).on("mouseover", function(d) {
                if (me.showTooltip instanceof Function) {
                    me.showTooltip.call(null, d)
                }
            }).on("mouseout", function(d) {
                if (me.hideTooltip instanceof Function) {
                    me.hideTooltip.call(null, d)
                }
            }).attr("transform", function(d) {
                return "translate(-200,-200)"
            });
            me._bubbles.each(function(d) {
                var radius = me._radiusScale(weightFunction(d));
                var c = me._categoryMap[categoryFunction(d)];
                var color = c ? c.color : "#ffffff";
                return me.customDrawFunction(d3.select(this), d, radius, color)
            });
            me._bubbles.append("text").attr({
                "text-anchor": "middle",
                dy: function(d) {
                    var radius = me._radiusScale(weightFunction(d));
                    return radius + 15
                }
            }).attr("font-size", function(d) {
                return "12px"
            }).attr("fill","rgba(255,255,255,0.8)").attr("font-family", "Microsoft Yahei").text(labelFunction);
            me._data.forEach(function(d, i) {
                d.fr = Math.max(me.minCollisionRadius, me._radiusScale(weightFunction(d)))
            });
            me._tickEnd = false;
            me._force.nodes(me._data).start();
            var left = 0;
            var right = 0;
            for (var i = 0; i < me._data.length; i++) {
                var overturn = false;
                var _px = me._data[i].x - me._width / 2;
                if (_px > 0) {
                    if (right >= me._data.length / 2) {
                        left++;
                        overturn = true
                    } else {
                        right++
                    }
                } else {
                    if (left >= me._data.length / 2) {
                        right++;
                        overturn = true
                    } else {
                        left++
                    }
                }
                if (overturn) {
                    var _x = _px * -1 + me._width / 2;
                    me._data[i].x = _x;
                    me._data[i].px = _x;
                    me._data[i].left = left;
                    me._data[i].right = right
                }
            }
            if (!me.animation) {
                while (!me._tickEnd) {
                    me._force.tick()
                }
            }
        },
        _force_tickHandler: function(e) {
            this._bubbles.each(this._gravity(e.alpha * 0.1)).each(this._collide(this._jitter))
        },
        _gravity: function(a) {
            var me = this;
            var cx = me._width / 2;
            var cy = me._height / 2;
            var ax = a / 5;
            var ay = a;
            return function(d) {
                if (Math.abs(cy - d.y) + 50 > me.height / 2) {
                    if (cx - d.x > 0) {
                        d.x -= me._width * 0.001
                    } else {
                        d.x += me._width * 0.001
                    }
                    if (cy - d.y > 0) {
                        d.y += me._height * 0.001
                    } else {
                        d.y -= me._height * 0.001
                    }
                }
                var _x = Math.abs(cx - (d.x + (cx - d.x) * ax));
                var _y = Math.abs(cy - (d.y + (cy - d.y) * ay));
                var dis = Math.sqrt(_x * _x + _y * _y);
                var minDis = me._coreDistanceScale(me.gradeFunction(d));
                if (minDis <= dis) {
                    d.x += (cx - d.x) * ax;
                    d.y += (cy - d.y) * ay
                } else {
                    d.x -= (cx - d.x) * ax;
                    d.y -= (cy - d.y) * ay
                }
            }
        },
        _collide: function(j) {
            var data = this._data;
            var collisionPadding = this.collisionPadding;
            return function(d) {
                data.forEach(function(d2) {
                    if (d !== d2) {
                        var x = d.x - d2.x;
                        var y = d.y - d2.y;
                        var dis = Math.sqrt(x * x + y * y);
                        var minDis = d.fr + d2.fr + collisionPadding;
                        if (dis < minDis) {
                            dis = (dis - minDis) / dis * j;
                            var mx = x * dis;
                            var my = y * dis;
                            d.x -= mx;
                            d.y -= my;
                            d2.x += mx;
                            d2.y += my
                        }
                    }
                })
            }
        }
    };
    if (window) {
        window.ForceGuidanceChart = forceGuidanceChart
    }
})(window);
